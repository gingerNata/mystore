<?php

/**
 * @file
 * Contains dadi.module.
 */

use Drupal\commerce_product\Entity\ProductType;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Entity;
use Drupal\commerce_product\Entity\ProductVariationType;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\views\ViewExecutable;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax;
use Drupal\Core\Ajax\OpenModalDialogCommand;


/**
 * Implements hook_help().
 */
function dadi_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the dadi module.
    case 'help.page.dadi':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Dadi custom module') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_form_alter().
 */
function dadi_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  $forms_for_validation = [
    "commerce_product_default_edit_form",
    "commerce_product_default_add_form",
    "commerce_product_inse_add_form",
    "commerce_product_inse_edit_form",
    "commerce_product_vzutta_add_form",
    "commerce_product_vzutta_edit_form",
  ];
  if (in_array($form_id, $forms_for_validation)) {
    $form['#validate'][] = 'dadi_on_product_save_validation';
  }
  
  switch ($form_id){
    case 'comment_comments_to_products_form':
      $user = \Drupal::currentUser();
      if ($user->id() && $email = $user->getEmail()) {
        $form['field_e_mail']['widget'][0]['value']['#default_value'] = $email;
      }
      $form['#attached']['library'][] = 'core/drupal.dialog.ajax';
      $form['actions']['submit']['#attributes'] = ['class' => ['use-ajax',],];
      $form['actions']['submit']['#ajax'] = [
        'callback' => 'comment_ajax_callback',
        'wrapper' => 'comment-form',
        ];
      break;
  }
}

/**
 * @param array $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * @return \Drupal\Core\Ajax\AjaxResponse
 */
function comment_ajax_callback(array &$form, FormStateInterface $form_state){
  $response = new AjaxResponse();
  if(!$form_state->hasAnyErrors()) {
    $options = array(
      'dialogClass' => 'popup-dialog-class',
      'width'       => '300',
      'height'      => '300',
    );
    $title = t('Subscribe to news');
    $email = $form_state->getValue('field_e_mail')[0]['value'];
    $content = _get_popup_content($email);
    $response->addCommand(new OpenModalDialogCommand($title, $content, $options));
  }
  else{
    $response->addCommand(new Ajax\ReplaceCommand('#comment-form', $form));
    $messages = drupal_get_messages(); // catch all messages
  }

  return $response;
}

/**
 * @param $email
 * @return \Drupal\Core\StringTranslation\TranslatableMarkup|string
 */
function _get_popup_content($email) {
  $succes_link = '<a href="/dadi/submit/subscribe/' . $email . '">' . t('Subscribe') . '</a>';
  $content = t('Would you like to subscribe to new items?');
  $content .= "<div class='popup-email'>" . $email . "</div>";
  $content .= '<div class="after-message">' . t('Any spam. Only useful information') . '</div>';
  $content .= '<a href="/dadi/reset/subscribe">' . t('Don\'t subscribe') . '</a>';
  $content .= "<button class='btn btn-success'>$succes_link</button>";
  return $content;
}


/**
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function dadi_on_product_save_validation(&$form, FormStateInterface $form_state) {
  $items_to_display = FALSE;

  if ($form_state->hasValue('variations')) {
    $variations = $form_state->getValue('variations');
    foreach ($variations['entities'] as $key => $value) {
      $comlete_form = $form_state->getCompleteForm();
      $entity = $comlete_form['variations']['widget']['entities'][$key];
      if ($entity) {
        $display_on_catalog = $entity['#entity']->get('field_on_catalog')
          ->getValue();
        if ($display_on_catalog[0]['value']) {
          $items_to_display = TRUE;
          break;
        }
      }
    }
    if (!$items_to_display) {
      $form_state->setErrorByName('variations', t('As min one variation must be displayed on catalog'));
    }
  }
}

/**
 * Implements hook_entity_extra_field_info().
 */
function dadi_entity_extra_field_info() {
  $extra = array();
  foreach (ProductVariationType::loadMultiple() as $bundle) {
    $extra['commerce_product_variation'][$bundle->Id()]['display']['wish_button'] = array(
      'label' => t('Wishlist button'),
      'description' => t('Add to wishlist button'),
      'weight' => 100,
      'visible' => TRUE,
    );
  }
  
  foreach (ProductType::loadMultiple() as $bundle) {
    $extra['commerce_product'][$bundle->Id()]['display']['size_block'] = array(
      'label' => t('Size block'),
      'description' => t('Popup with sizes'),
      'weight' => 101,
      'visible' => TRUE,
    );
  }

  return $extra;
}

/**
 * Implements hook_entity_view().
 */
function dadi_entity_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if ($display->getComponent('wish_button')) {
    $id = $entity->get('variation_id')->getString();
    $link_text = t("Add to wishlist");
    $build['wish_button'] = [
      '#type' => 'markup',
      '#attached' => array(
        'library' => array(
          'dadi/wish-button',
        ),
      ),
      '#markup' => '<a class="use-ajax wishlist-button" id="variation-' . $id . '"
      href="/ajax/addtowishlist/' . $id . '"> ' . $link_text . '</a>',
    ];
  }
  elseif ($display->getComponent('size_block')) {
    $link_text = t("Size information");
    $type = $display->get('bundle');
    $language = \Drupal::languageManager()->getCurrentLanguage()->getId();

    switch ($type) {
      case 'vzutta':
        $markup = '<a class="use-ajax size-information" id="size-information" href="/'
         . $language . '/ajax/shoes-size-information/">' . $link_text . '</a>';
        break;
      case 'default':
        $markup = '<a class="use-ajax size-information" id="size-information" href="/'
          . $language . '/ajax/size-information/">' . $link_text . '</a>';
        break;
      default:
        $markup = '';
    }
    $build['size_block'] = [
      '#type' => 'markup',
      '#attached' => array(
        'library' => array(
          'dadi/wish-button',
        ),
      ),
      '#markup' => $markup,
    ];
  }
}

/**
 * Implements hook_preprocess_page().
 */
function dadi_preprocess_page(&$variables) {
  $logged_in = \Drupal::currentUser()->isAuthenticated();
  if (!$logged_in) {
    # Add libraries for anonymous
    $libraries['#attached']['library'][] = 'core/drupal.ajax';
    render($libraries);
  }
}


